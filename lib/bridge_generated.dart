// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<Platform> platform({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_platform(port_),
      parseSuccessData: _wire2api_platform,
      parseErrorData: null,
      constMeta: kPlatformConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPlatformConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "platform",
        argNames: [],
      );

  Future<bool> rustReleaseMode({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_rust_release_mode(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kRustReleaseModeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRustReleaseModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rust_release_mode",
        argNames: [],
      );

  Future<void> addTicket({required Ticket ticket, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ticket(ticket);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_add_ticket(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kAddTicketConstMeta,
      argValues: [ticket],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddTicketConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_ticket",
        argNames: ["ticket"],
      );

  Future<void> updateTicket({required Ticket ticket, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ticket(ticket);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_update_ticket(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kUpdateTicketConstMeta,
      argValues: [ticket],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateTicketConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_ticket",
        argNames: ["ticket"],
      );

  Future<List<Ticket>> queryTicket(
      {required List<OrderType> orderTypeFilter,
      required FilterTime timeFilter,
      required List<Courser> courserFilter,
      required List<String> tagsFilter,
      dynamic hint}) {
    var arg0 = _platform.api2wire_list_order_type(orderTypeFilter);
    var arg1 = _platform.api2wire_box_autoadd_filter_time(timeFilter);
    var arg2 = _platform.api2wire_list_courser(courserFilter);
    var arg3 = _platform.api2wire_StringList(tagsFilter);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_query_ticket(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_list_ticket,
      parseErrorData: null,
      constMeta: kQueryTicketConstMeta,
      argValues: [orderTypeFilter, timeFilter, courserFilter, tagsFilter],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kQueryTicketConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "query_ticket",
        argNames: [
          "orderTypeFilter",
          "timeFilter",
          "courserFilter",
          "tagsFilter"
        ],
      );

  Future<void> callback({required CallbackChanged changed, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_callback_changed(changed);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_callback(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kCallbackConstMeta,
      argValues: [changed],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCallbackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "callback",
        argNames: ["changed"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  AdditionFee _wire2api_addition_fee(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AdditionFee(
      name: _wire2api_String(arr[0]),
      amount: _wire2api_String(arr[1]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  Costs _wire2api_box_autoadd_costs(dynamic raw) {
    return _wire2api_costs(raw);
  }

  Courser _wire2api_box_autoadd_courser(dynamic raw) {
    return _wire2api_courser(raw);
  }

  OrderOnlineParty _wire2api_box_autoadd_order_online_party(dynamic raw) {
    return _wire2api_order_online_party(raw);
  }

  OrderTypeInfo _wire2api_box_autoadd_order_type_info(dynamic raw) {
    return _wire2api_order_type_info(raw);
  }

  RetryInfo _wire2api_box_autoadd_retry_info(dynamic raw) {
    return _wire2api_retry_info(raw);
  }

  SMSNotify _wire2api_box_autoadd_sms_notify(dynamic raw) {
    return _wire2api_sms_notify(raw);
  }

  Staff _wire2api_box_autoadd_staff(dynamic raw) {
    return _wire2api_staff(raw);
  }

  Component _wire2api_component(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Component(
      name: _wire2api_String(arr[0]),
      quantity: _wire2api_u64(arr[1]),
    );
  }

  Costs _wire2api_costs(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Costs(
      subtotal: _wire2api_String(arr[0]),
      tax: _wire2api_String(arr[1]),
      deliveryFee: _wire2api_String(arr[2]),
      surcharge: _wire2api_String(arr[3]),
      convenienceFee: _wire2api_String(arr[4]),
      tip: _wire2api_String(arr[5]),
      additionalFees: _wire2api_list_addition_fee(arr[6]),
      total: _wire2api_String(arr[7]),
      promoCodes: _wire2api_list_promo_code(arr[8]),
    );
  }

  Courser _wire2api_courser(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Courser(
      name: _wire2api_String(arr[0]),
      courserId: _wire2api_String(arr[1]),
      courserSequence: _wire2api_u64(arr[2]),
    );
  }

  CreatedEntity _wire2api_created_entity(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CreatedEntity_Staff(
          _wire2api_box_autoadd_staff(raw[1]),
        );
      case 1:
        return CreatedEntity_OrderOnlineParty(
          _wire2api_box_autoadd_order_online_party(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  List<AdditionFee> _wire2api_list_addition_fee(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_addition_fee).toList();
  }

  List<Component> _wire2api_list_component(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_component).toList();
  }

  List<OrderItem> _wire2api_list_order_item(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_order_item).toList();
  }

  List<PromoCode> _wire2api_list_promo_code(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_promo_code).toList();
  }

  List<Ticket> _wire2api_list_ticket(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_ticket).toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  Costs? _wire2api_opt_box_autoadd_costs(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_costs(raw);
  }

  Courser? _wire2api_opt_box_autoadd_courser(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_courser(raw);
  }

  RetryInfo? _wire2api_opt_box_autoadd_retry_info(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_retry_info(raw);
  }

  SMSNotify? _wire2api_opt_box_autoadd_sms_notify(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_sms_notify(raw);
  }

  OrderItem _wire2api_order_item(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return OrderItem(
      name: _wire2api_String(arr[0]),
      comboName: _wire2api_opt_String(arr[1]),
      orderItemId: _wire2api_String(arr[2]),
      quantity: _wire2api_u64(arr[3]),
      tags: _wire2api_StringList(arr[4]),
      size: _wire2api_String(arr[5]),
      prepareNotes: _wire2api_String(arr[6]),
      status: _wire2api_order_item_status(arr[7]),
      courser: _wire2api_opt_box_autoadd_courser(arr[8]),
      modifiers: _wire2api_StringList(arr[9]),
      components: _wire2api_list_component(arr[10]),
    );
  }

  OrderItemStatus _wire2api_order_item_status(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return OrderItemStatus_Cooking();
      case 1:
        return OrderItemStatus_Avoid(
          _wire2api_String(raw[1]),
        );
      case 2:
        return OrderItemStatus_Pending();
      case 3:
        return OrderItemStatus_Done();
      default:
        throw Exception("unreachable");
    }
  }

  OrderOnlineParty _wire2api_order_online_party(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return OrderOnlineParty_Uber();
      case 1:
        return OrderOnlineParty_Grab();
      case 2:
        return OrderOnlineParty_UberEat();
      case 3:
        return OrderOnlineParty_DoorDash();
      case 4:
        return OrderOnlineParty_SkipTheDisk();
      case 5:
        return OrderOnlineParty_Other(
          name: _wire2api_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  OrderType _wire2api_order_type(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return OrderType_Delivery(
          _wire2api_box_autoadd_order_type_info(raw[1]),
        );
      case 1:
        return OrderType_ForHere(
          _wire2api_box_autoadd_order_type_info(raw[1]),
        );
      case 2:
        return OrderType_Pickup(
          _wire2api_box_autoadd_order_type_info(raw[1]),
        );
      case 3:
        return OrderType_DriveThrough(
          _wire2api_box_autoadd_order_type_info(raw[1]),
        );
      case 4:
        return OrderType_Curbside(
          _wire2api_box_autoadd_order_type_info(raw[1]),
        );
      case 5:
        return OrderType_Togo(
          _wire2api_box_autoadd_order_type_info(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  OrderTypeInfo _wire2api_order_type_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return OrderTypeInfo(
      name: _wire2api_String(arr[0]),
      phone: _wire2api_String(arr[1]),
      vehicleModel: _wire2api_String(arr[2]),
      vehicleColor: _wire2api_String(arr[3]),
      vehiclePlate: _wire2api_String(arr[4]),
      notes: _wire2api_String(arr[5]),
      time: _wire2api_u64(arr[6]),
      address: _wire2api_String(arr[7]),
    );
  }

  Platform _wire2api_platform(dynamic raw) {
    return Platform.values[raw as int];
  }

  PromoCode _wire2api_promo_code(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PromoCode(
      name: _wire2api_String(arr[0]),
      amount: _wire2api_String(arr[1]),
    );
  }

  RetryInfo _wire2api_retry_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RetryInfo(
      notificationUrl: _wire2api_String(arr[0]),
      expireTime: _wire2api_u64(arr[1]),
    );
  }

  SMSNotify _wire2api_sms_notify(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SMSNotify(
      name: _wire2api_String(arr[0]),
      phone: _wire2api_String(arr[1]),
      customerArriveUrl: _wire2api_String(arr[2]),
    );
  }

  Staff _wire2api_staff(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Staff(
      name: _wire2api_String(arr[0]),
      staffId: _wire2api_String(arr[1]),
      phoneNumber: _wire2api_String(arr[2]),
      address: _wire2api_String(arr[3]),
    );
  }

  Ticket _wire2api_ticket(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return Ticket(
      orderType: _wire2api_order_type(arr[0]),
      createdBy: _wire2api_created_entity(arr[1]),
      ticketName: _wire2api_String(arr[2]),
      createdTime: _wire2api_u64(arr[3]),
      ticketId: _wire2api_String(arr[4]),
      ticketSequence: _wire2api_String(arr[5]),
      orderItems: _wire2api_list_order_item(arr[6]),
      ticketStatus: _wire2api_ticket_status(arr[7]),
      smsNotify: _wire2api_opt_box_autoadd_sms_notify(arr[8]),
      costs: _wire2api_opt_box_autoadd_costs(arr[9]),
      retry: _wire2api_opt_box_autoadd_retry_info(arr[10]),
    );
  }

  TicketStatus _wire2api_ticket_status(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return TicketStatus_Cooking();
      case 1:
        return TicketStatus_Avoid(
          _wire2api_String(raw[1]),
        );
      case 2:
        return TicketStatus_Pending();
      case 3:
        return TicketStatus_Done();
      default:
        throw Exception("unreachable");
    }
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_CallbackChanged> api2wire_box_autoadd_callback_changed(
      CallbackChanged raw) {
    final ptr = inner.new_box_autoadd_callback_changed_0();
    _api_fill_to_wire_callback_changed(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Costs> api2wire_box_autoadd_costs(Costs raw) {
    final ptr = inner.new_box_autoadd_costs_0();
    _api_fill_to_wire_costs(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Courser> api2wire_box_autoadd_courser(Courser raw) {
    final ptr = inner.new_box_autoadd_courser_0();
    _api_fill_to_wire_courser(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_FilterTime> api2wire_box_autoadd_filter_time(
      FilterTime raw) {
    final ptr = inner.new_box_autoadd_filter_time_0();
    _api_fill_to_wire_filter_time(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_OrderOnlineParty> api2wire_box_autoadd_order_online_party(
      OrderOnlineParty raw) {
    final ptr = inner.new_box_autoadd_order_online_party_0();
    _api_fill_to_wire_order_online_party(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_OrderTypeInfo> api2wire_box_autoadd_order_type_info(
      OrderTypeInfo raw) {
    final ptr = inner.new_box_autoadd_order_type_info_0();
    _api_fill_to_wire_order_type_info(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RetryInfo> api2wire_box_autoadd_retry_info(RetryInfo raw) {
    final ptr = inner.new_box_autoadd_retry_info_0();
    _api_fill_to_wire_retry_info(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SMSNotify> api2wire_box_autoadd_sms_notify(SMSNotify raw) {
    final ptr = inner.new_box_autoadd_sms_notify_0();
    _api_fill_to_wire_sms_notify(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Staff> api2wire_box_autoadd_staff(Staff raw) {
    final ptr = inner.new_box_autoadd_staff_0();
    _api_fill_to_wire_staff(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Ticket> api2wire_box_autoadd_ticket(Ticket raw) {
    final ptr = inner.new_box_autoadd_ticket_0();
    _api_fill_to_wire_ticket(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_addition_fee> api2wire_list_addition_fee(
      List<AdditionFee> raw) {
    final ans = inner.new_list_addition_fee_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_addition_fee(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_component> api2wire_list_component(
      List<Component> raw) {
    final ans = inner.new_list_component_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_component(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_courser> api2wire_list_courser(List<Courser> raw) {
    final ans = inner.new_list_courser_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_courser(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_order_item> api2wire_list_order_item(
      List<OrderItem> raw) {
    final ans = inner.new_list_order_item_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_order_item(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_order_type> api2wire_list_order_type(
      List<OrderType> raw) {
    final ans = inner.new_list_order_type_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_order_type(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_promo_code> api2wire_list_promo_code(
      List<PromoCode> raw) {
    final ans = inner.new_list_promo_code_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_promo_code(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_ticket> api2wire_list_ticket(List<Ticket> raw) {
    final ans = inner.new_list_ticket_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_ticket(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_Costs> api2wire_opt_box_autoadd_costs(Costs? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_costs(raw);
  }

  @protected
  ffi.Pointer<wire_Courser> api2wire_opt_box_autoadd_courser(Courser? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_courser(raw);
  }

  @protected
  ffi.Pointer<wire_RetryInfo> api2wire_opt_box_autoadd_retry_info(
      RetryInfo? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_retry_info(raw);
  }

  @protected
  ffi.Pointer<wire_SMSNotify> api2wire_opt_box_autoadd_sms_notify(
      SMSNotify? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_sms_notify(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_addition_fee(
      AdditionFee apiObj, wire_AdditionFee wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.amount = api2wire_String(apiObj.amount);
  }

  void _api_fill_to_wire_box_autoadd_callback_changed(
      CallbackChanged apiObj, ffi.Pointer<wire_CallbackChanged> wireObj) {
    _api_fill_to_wire_callback_changed(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_costs(
      Costs apiObj, ffi.Pointer<wire_Costs> wireObj) {
    _api_fill_to_wire_costs(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_courser(
      Courser apiObj, ffi.Pointer<wire_Courser> wireObj) {
    _api_fill_to_wire_courser(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_filter_time(
      FilterTime apiObj, ffi.Pointer<wire_FilterTime> wireObj) {
    _api_fill_to_wire_filter_time(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_order_online_party(
      OrderOnlineParty apiObj, ffi.Pointer<wire_OrderOnlineParty> wireObj) {
    _api_fill_to_wire_order_online_party(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_order_type_info(
      OrderTypeInfo apiObj, ffi.Pointer<wire_OrderTypeInfo> wireObj) {
    _api_fill_to_wire_order_type_info(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_retry_info(
      RetryInfo apiObj, ffi.Pointer<wire_RetryInfo> wireObj) {
    _api_fill_to_wire_retry_info(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sms_notify(
      SMSNotify apiObj, ffi.Pointer<wire_SMSNotify> wireObj) {
    _api_fill_to_wire_sms_notify(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_staff(
      Staff apiObj, ffi.Pointer<wire_Staff> wireObj) {
    _api_fill_to_wire_staff(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ticket(
      Ticket apiObj, ffi.Pointer<wire_Ticket> wireObj) {
    _api_fill_to_wire_ticket(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_callback_changed(
      CallbackChanged apiObj, wire_CallbackChanged wireObj) {
    if (apiObj is CallbackChanged_Ticket) {
      var pre_tickets = api2wire_list_ticket(apiObj.tickets);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_CallbackChanged_Ticket();
      wireObj.kind.ref.Ticket.ref.tickets = pre_tickets;
      return;
    }
    if (apiObj is CallbackChanged_OrderItem) {
      var pre_order_items = api2wire_list_order_item(apiObj.orderItems);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_CallbackChanged_OrderItem();
      wireObj.kind.ref.OrderItem.ref.order_items = pre_order_items;
      return;
    }
  }

  void _api_fill_to_wire_component(Component apiObj, wire_Component wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.quantity = api2wire_u64(apiObj.quantity);
  }

  void _api_fill_to_wire_costs(Costs apiObj, wire_Costs wireObj) {
    wireObj.subtotal = api2wire_String(apiObj.subtotal);
    wireObj.tax = api2wire_String(apiObj.tax);
    wireObj.delivery_fee = api2wire_String(apiObj.deliveryFee);
    wireObj.surcharge = api2wire_String(apiObj.surcharge);
    wireObj.convenience_fee = api2wire_String(apiObj.convenienceFee);
    wireObj.tip = api2wire_String(apiObj.tip);
    wireObj.additional_fees = api2wire_list_addition_fee(apiObj.additionalFees);
    wireObj.total = api2wire_String(apiObj.total);
    wireObj.promo_codes = api2wire_list_promo_code(apiObj.promoCodes);
  }

  void _api_fill_to_wire_courser(Courser apiObj, wire_Courser wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.courser_id = api2wire_String(apiObj.courserId);
    wireObj.courser_sequence = api2wire_u64(apiObj.courserSequence);
  }

  void _api_fill_to_wire_created_entity(
      CreatedEntity apiObj, wire_CreatedEntity wireObj) {
    if (apiObj is CreatedEntity_Staff) {
      var pre_field0 = api2wire_box_autoadd_staff(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_CreatedEntity_Staff();
      wireObj.kind.ref.Staff.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is CreatedEntity_OrderOnlineParty) {
      var pre_field0 = api2wire_box_autoadd_order_online_party(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_CreatedEntity_OrderOnlineParty();
      wireObj.kind.ref.OrderOnlineParty.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_filter_time(
      FilterTime apiObj, wire_FilterTime wireObj) {
    wireObj.start_time = api2wire_u64(apiObj.startTime);
    wireObj.end_time = api2wire_u64(apiObj.endTime);
  }

  void _api_fill_to_wire_opt_box_autoadd_costs(
      Costs? apiObj, ffi.Pointer<wire_Costs> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_costs(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_courser(
      Courser? apiObj, ffi.Pointer<wire_Courser> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_courser(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_retry_info(
      RetryInfo? apiObj, ffi.Pointer<wire_RetryInfo> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_retry_info(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_sms_notify(
      SMSNotify? apiObj, ffi.Pointer<wire_SMSNotify> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_sms_notify(apiObj, wireObj);
  }

  void _api_fill_to_wire_order_item(OrderItem apiObj, wire_OrderItem wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.combo_name = api2wire_opt_String(apiObj.comboName);
    wireObj.order_item_id = api2wire_String(apiObj.orderItemId);
    wireObj.quantity = api2wire_u64(apiObj.quantity);
    wireObj.tags = api2wire_StringList(apiObj.tags);
    wireObj.size = api2wire_String(apiObj.size);
    wireObj.prepare_notes = api2wire_String(apiObj.prepareNotes);
    _api_fill_to_wire_order_item_status(apiObj.status, wireObj.status);
    wireObj.courser = api2wire_opt_box_autoadd_courser(apiObj.courser);
    wireObj.modifiers = api2wire_StringList(apiObj.modifiers);
    wireObj.components = api2wire_list_component(apiObj.components);
  }

  void _api_fill_to_wire_order_item_status(
      OrderItemStatus apiObj, wire_OrderItemStatus wireObj) {
    if (apiObj is OrderItemStatus_Cooking) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is OrderItemStatus_Avoid) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_OrderItemStatus_Avoid();
      wireObj.kind.ref.Avoid.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OrderItemStatus_Pending) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is OrderItemStatus_Done) {
      wireObj.tag = 3;
      return;
    }
  }

  void _api_fill_to_wire_order_online_party(
      OrderOnlineParty apiObj, wire_OrderOnlineParty wireObj) {
    if (apiObj is OrderOnlineParty_Uber) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is OrderOnlineParty_Grab) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is OrderOnlineParty_UberEat) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is OrderOnlineParty_DoorDash) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is OrderOnlineParty_SkipTheDisk) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is OrderOnlineParty_Other) {
      var pre_name = api2wire_String(apiObj.name);
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_OrderOnlineParty_Other();
      wireObj.kind.ref.Other.ref.name = pre_name;
      return;
    }
  }

  void _api_fill_to_wire_order_type(OrderType apiObj, wire_OrderType wireObj) {
    if (apiObj is OrderType_Delivery) {
      var pre_field0 = api2wire_box_autoadd_order_type_info(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_OrderType_Delivery();
      wireObj.kind.ref.Delivery.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OrderType_ForHere) {
      var pre_field0 = api2wire_box_autoadd_order_type_info(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_OrderType_ForHere();
      wireObj.kind.ref.ForHere.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OrderType_Pickup) {
      var pre_field0 = api2wire_box_autoadd_order_type_info(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_OrderType_Pickup();
      wireObj.kind.ref.Pickup.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OrderType_DriveThrough) {
      var pre_field0 = api2wire_box_autoadd_order_type_info(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_OrderType_DriveThrough();
      wireObj.kind.ref.DriveThrough.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OrderType_Curbside) {
      var pre_field0 = api2wire_box_autoadd_order_type_info(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_OrderType_Curbside();
      wireObj.kind.ref.Curbside.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is OrderType_Togo) {
      var pre_field0 = api2wire_box_autoadd_order_type_info(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_OrderType_Togo();
      wireObj.kind.ref.Togo.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_order_type_info(
      OrderTypeInfo apiObj, wire_OrderTypeInfo wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.phone = api2wire_String(apiObj.phone);
    wireObj.vehicle_model = api2wire_String(apiObj.vehicleModel);
    wireObj.vehicle_color = api2wire_String(apiObj.vehicleColor);
    wireObj.vehicle_plate = api2wire_String(apiObj.vehiclePlate);
    wireObj.notes = api2wire_String(apiObj.notes);
    wireObj.time = api2wire_u64(apiObj.time);
    wireObj.address = api2wire_String(apiObj.address);
  }

  void _api_fill_to_wire_promo_code(PromoCode apiObj, wire_PromoCode wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.amount = api2wire_String(apiObj.amount);
  }

  void _api_fill_to_wire_retry_info(RetryInfo apiObj, wire_RetryInfo wireObj) {
    wireObj.notification_url = api2wire_String(apiObj.notificationUrl);
    wireObj.expire_time = api2wire_u64(apiObj.expireTime);
  }

  void _api_fill_to_wire_sms_notify(SMSNotify apiObj, wire_SMSNotify wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.phone = api2wire_String(apiObj.phone);
    wireObj.customer_arrive_url = api2wire_String(apiObj.customerArriveUrl);
  }

  void _api_fill_to_wire_staff(Staff apiObj, wire_Staff wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.staff_id = api2wire_String(apiObj.staffId);
    wireObj.phone_number = api2wire_String(apiObj.phoneNumber);
    wireObj.address = api2wire_String(apiObj.address);
  }

  void _api_fill_to_wire_ticket(Ticket apiObj, wire_Ticket wireObj) {
    _api_fill_to_wire_order_type(apiObj.orderType, wireObj.order_type);
    _api_fill_to_wire_created_entity(apiObj.createdBy, wireObj.created_by);
    wireObj.ticket_name = api2wire_String(apiObj.ticketName);
    wireObj.created_time = api2wire_u64(apiObj.createdTime);
    wireObj.ticket_id = api2wire_String(apiObj.ticketId);
    wireObj.ticket_sequence = api2wire_String(apiObj.ticketSequence);
    wireObj.order_items = api2wire_list_order_item(apiObj.orderItems);
    _api_fill_to_wire_ticket_status(apiObj.ticketStatus, wireObj.ticket_status);
    wireObj.sms_notify = api2wire_opt_box_autoadd_sms_notify(apiObj.smsNotify);
    wireObj.costs = api2wire_opt_box_autoadd_costs(apiObj.costs);
    wireObj.retry = api2wire_opt_box_autoadd_retry_info(apiObj.retry);
  }

  void _api_fill_to_wire_ticket_status(
      TicketStatus apiObj, wire_TicketStatus wireObj) {
    if (apiObj is TicketStatus_Cooking) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is TicketStatus_Avoid) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_TicketStatus_Avoid();
      wireObj.kind.ref.Avoid.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is TicketStatus_Pending) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is TicketStatus_Done) {
      wireObj.tag = 3;
      return;
    }
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_platform(
    int port_,
  ) {
    return _wire_platform(
      port_,
    );
  }

  late final _wire_platformPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_platform');
  late final _wire_platform =
      _wire_platformPtr.asFunction<void Function(int)>();

  void wire_rust_release_mode(
    int port_,
  ) {
    return _wire_rust_release_mode(
      port_,
    );
  }

  late final _wire_rust_release_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_rust_release_mode');
  late final _wire_rust_release_mode =
      _wire_rust_release_modePtr.asFunction<void Function(int)>();

  void wire_add_ticket(
    int port_,
    ffi.Pointer<wire_Ticket> ticket,
  ) {
    return _wire_add_ticket(
      port_,
      ticket,
    );
  }

  late final _wire_add_ticketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Ticket>)>>('wire_add_ticket');
  late final _wire_add_ticket = _wire_add_ticketPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Ticket>)>();

  void wire_update_ticket(
    int port_,
    ffi.Pointer<wire_Ticket> ticket,
  ) {
    return _wire_update_ticket(
      port_,
      ticket,
    );
  }

  late final _wire_update_ticketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Ticket>)>>('wire_update_ticket');
  late final _wire_update_ticket = _wire_update_ticketPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Ticket>)>();

  void wire_query_ticket(
    int port_,
    ffi.Pointer<wire_list_order_type> order_type_filter,
    ffi.Pointer<wire_FilterTime> time_filter,
    ffi.Pointer<wire_list_courser> courser_filter,
    ffi.Pointer<wire_StringList> tags_filter,
  ) {
    return _wire_query_ticket(
      port_,
      order_type_filter,
      time_filter,
      courser_filter,
      tags_filter,
    );
  }

  late final _wire_query_ticketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_list_order_type>,
              ffi.Pointer<wire_FilterTime>,
              ffi.Pointer<wire_list_courser>,
              ffi.Pointer<wire_StringList>)>>('wire_query_ticket');
  late final _wire_query_ticket = _wire_query_ticketPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_list_order_type>,
          ffi.Pointer<wire_FilterTime>,
          ffi.Pointer<wire_list_courser>,
          ffi.Pointer<wire_StringList>)>();

  void wire_callback(
    int port_,
    ffi.Pointer<wire_CallbackChanged> changed,
  ) {
    return _wire_callback(
      port_,
      changed,
    );
  }

  late final _wire_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_CallbackChanged>)>>('wire_callback');
  late final _wire_callback = _wire_callbackPtr
      .asFunction<void Function(int, ffi.Pointer<wire_CallbackChanged>)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_CallbackChanged> new_box_autoadd_callback_changed_0() {
    return _new_box_autoadd_callback_changed_0();
  }

  late final _new_box_autoadd_callback_changed_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_CallbackChanged> Function()>>(
          'new_box_autoadd_callback_changed_0');
  late final _new_box_autoadd_callback_changed_0 =
      _new_box_autoadd_callback_changed_0Ptr
          .asFunction<ffi.Pointer<wire_CallbackChanged> Function()>();

  ffi.Pointer<wire_Costs> new_box_autoadd_costs_0() {
    return _new_box_autoadd_costs_0();
  }

  late final _new_box_autoadd_costs_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Costs> Function()>>(
          'new_box_autoadd_costs_0');
  late final _new_box_autoadd_costs_0 = _new_box_autoadd_costs_0Ptr
      .asFunction<ffi.Pointer<wire_Costs> Function()>();

  ffi.Pointer<wire_Courser> new_box_autoadd_courser_0() {
    return _new_box_autoadd_courser_0();
  }

  late final _new_box_autoadd_courser_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Courser> Function()>>(
          'new_box_autoadd_courser_0');
  late final _new_box_autoadd_courser_0 = _new_box_autoadd_courser_0Ptr
      .asFunction<ffi.Pointer<wire_Courser> Function()>();

  ffi.Pointer<wire_FilterTime> new_box_autoadd_filter_time_0() {
    return _new_box_autoadd_filter_time_0();
  }

  late final _new_box_autoadd_filter_time_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_FilterTime> Function()>>(
          'new_box_autoadd_filter_time_0');
  late final _new_box_autoadd_filter_time_0 = _new_box_autoadd_filter_time_0Ptr
      .asFunction<ffi.Pointer<wire_FilterTime> Function()>();

  ffi.Pointer<wire_OrderOnlineParty> new_box_autoadd_order_online_party_0() {
    return _new_box_autoadd_order_online_party_0();
  }

  late final _new_box_autoadd_order_online_party_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_OrderOnlineParty> Function()>>(
      'new_box_autoadd_order_online_party_0');
  late final _new_box_autoadd_order_online_party_0 =
      _new_box_autoadd_order_online_party_0Ptr
          .asFunction<ffi.Pointer<wire_OrderOnlineParty> Function()>();

  ffi.Pointer<wire_OrderTypeInfo> new_box_autoadd_order_type_info_0() {
    return _new_box_autoadd_order_type_info_0();
  }

  late final _new_box_autoadd_order_type_info_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_OrderTypeInfo> Function()>>(
          'new_box_autoadd_order_type_info_0');
  late final _new_box_autoadd_order_type_info_0 =
      _new_box_autoadd_order_type_info_0Ptr
          .asFunction<ffi.Pointer<wire_OrderTypeInfo> Function()>();

  ffi.Pointer<wire_RetryInfo> new_box_autoadd_retry_info_0() {
    return _new_box_autoadd_retry_info_0();
  }

  late final _new_box_autoadd_retry_info_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RetryInfo> Function()>>(
          'new_box_autoadd_retry_info_0');
  late final _new_box_autoadd_retry_info_0 = _new_box_autoadd_retry_info_0Ptr
      .asFunction<ffi.Pointer<wire_RetryInfo> Function()>();

  ffi.Pointer<wire_SMSNotify> new_box_autoadd_sms_notify_0() {
    return _new_box_autoadd_sms_notify_0();
  }

  late final _new_box_autoadd_sms_notify_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SMSNotify> Function()>>(
          'new_box_autoadd_sms_notify_0');
  late final _new_box_autoadd_sms_notify_0 = _new_box_autoadd_sms_notify_0Ptr
      .asFunction<ffi.Pointer<wire_SMSNotify> Function()>();

  ffi.Pointer<wire_Staff> new_box_autoadd_staff_0() {
    return _new_box_autoadd_staff_0();
  }

  late final _new_box_autoadd_staff_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Staff> Function()>>(
          'new_box_autoadd_staff_0');
  late final _new_box_autoadd_staff_0 = _new_box_autoadd_staff_0Ptr
      .asFunction<ffi.Pointer<wire_Staff> Function()>();

  ffi.Pointer<wire_Ticket> new_box_autoadd_ticket_0() {
    return _new_box_autoadd_ticket_0();
  }

  late final _new_box_autoadd_ticket_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Ticket> Function()>>(
          'new_box_autoadd_ticket_0');
  late final _new_box_autoadd_ticket_0 = _new_box_autoadd_ticket_0Ptr
      .asFunction<ffi.Pointer<wire_Ticket> Function()>();

  ffi.Pointer<wire_list_addition_fee> new_list_addition_fee_0(
    int len,
  ) {
    return _new_list_addition_fee_0(
      len,
    );
  }

  late final _new_list_addition_fee_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_addition_fee> Function(
              ffi.Int32)>>('new_list_addition_fee_0');
  late final _new_list_addition_fee_0 = _new_list_addition_fee_0Ptr
      .asFunction<ffi.Pointer<wire_list_addition_fee> Function(int)>();

  ffi.Pointer<wire_list_component> new_list_component_0(
    int len,
  ) {
    return _new_list_component_0(
      len,
    );
  }

  late final _new_list_component_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_component> Function(
              ffi.Int32)>>('new_list_component_0');
  late final _new_list_component_0 = _new_list_component_0Ptr
      .asFunction<ffi.Pointer<wire_list_component> Function(int)>();

  ffi.Pointer<wire_list_courser> new_list_courser_0(
    int len,
  ) {
    return _new_list_courser_0(
      len,
    );
  }

  late final _new_list_courser_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_list_courser> Function(ffi.Int32)>>(
      'new_list_courser_0');
  late final _new_list_courser_0 = _new_list_courser_0Ptr
      .asFunction<ffi.Pointer<wire_list_courser> Function(int)>();

  ffi.Pointer<wire_list_order_item> new_list_order_item_0(
    int len,
  ) {
    return _new_list_order_item_0(
      len,
    );
  }

  late final _new_list_order_item_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_order_item> Function(
              ffi.Int32)>>('new_list_order_item_0');
  late final _new_list_order_item_0 = _new_list_order_item_0Ptr
      .asFunction<ffi.Pointer<wire_list_order_item> Function(int)>();

  ffi.Pointer<wire_list_order_type> new_list_order_type_0(
    int len,
  ) {
    return _new_list_order_type_0(
      len,
    );
  }

  late final _new_list_order_type_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_order_type> Function(
              ffi.Int32)>>('new_list_order_type_0');
  late final _new_list_order_type_0 = _new_list_order_type_0Ptr
      .asFunction<ffi.Pointer<wire_list_order_type> Function(int)>();

  ffi.Pointer<wire_list_promo_code> new_list_promo_code_0(
    int len,
  ) {
    return _new_list_promo_code_0(
      len,
    );
  }

  late final _new_list_promo_code_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_promo_code> Function(
              ffi.Int32)>>('new_list_promo_code_0');
  late final _new_list_promo_code_0 = _new_list_promo_code_0Ptr
      .asFunction<ffi.Pointer<wire_list_promo_code> Function(int)>();

  ffi.Pointer<wire_list_ticket> new_list_ticket_0(
    int len,
  ) {
    return _new_list_ticket_0(
      len,
    );
  }

  late final _new_list_ticket_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_list_ticket> Function(ffi.Int32)>>(
      'new_list_ticket_0');
  late final _new_list_ticket_0 = _new_list_ticket_0Ptr
      .asFunction<ffi.Pointer<wire_list_ticket> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<CallbackChangedKind> inflate_CallbackChanged_Ticket() {
    return _inflate_CallbackChanged_Ticket();
  }

  late final _inflate_CallbackChanged_TicketPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CallbackChangedKind> Function()>>(
          'inflate_CallbackChanged_Ticket');
  late final _inflate_CallbackChanged_Ticket =
      _inflate_CallbackChanged_TicketPtr
          .asFunction<ffi.Pointer<CallbackChangedKind> Function()>();

  ffi.Pointer<CallbackChangedKind> inflate_CallbackChanged_OrderItem() {
    return _inflate_CallbackChanged_OrderItem();
  }

  late final _inflate_CallbackChanged_OrderItemPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CallbackChangedKind> Function()>>(
          'inflate_CallbackChanged_OrderItem');
  late final _inflate_CallbackChanged_OrderItem =
      _inflate_CallbackChanged_OrderItemPtr
          .asFunction<ffi.Pointer<CallbackChangedKind> Function()>();

  ffi.Pointer<CreatedEntityKind> inflate_CreatedEntity_Staff() {
    return _inflate_CreatedEntity_Staff();
  }

  late final _inflate_CreatedEntity_StaffPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CreatedEntityKind> Function()>>(
          'inflate_CreatedEntity_Staff');
  late final _inflate_CreatedEntity_Staff = _inflate_CreatedEntity_StaffPtr
      .asFunction<ffi.Pointer<CreatedEntityKind> Function()>();

  ffi.Pointer<CreatedEntityKind> inflate_CreatedEntity_OrderOnlineParty() {
    return _inflate_CreatedEntity_OrderOnlineParty();
  }

  late final _inflate_CreatedEntity_OrderOnlinePartyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CreatedEntityKind> Function()>>(
          'inflate_CreatedEntity_OrderOnlineParty');
  late final _inflate_CreatedEntity_OrderOnlineParty =
      _inflate_CreatedEntity_OrderOnlinePartyPtr
          .asFunction<ffi.Pointer<CreatedEntityKind> Function()>();

  ffi.Pointer<OrderItemStatusKind> inflate_OrderItemStatus_Avoid() {
    return _inflate_OrderItemStatus_Avoid();
  }

  late final _inflate_OrderItemStatus_AvoidPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OrderItemStatusKind> Function()>>(
          'inflate_OrderItemStatus_Avoid');
  late final _inflate_OrderItemStatus_Avoid = _inflate_OrderItemStatus_AvoidPtr
      .asFunction<ffi.Pointer<OrderItemStatusKind> Function()>();

  ffi.Pointer<OrderOnlinePartyKind> inflate_OrderOnlineParty_Other() {
    return _inflate_OrderOnlineParty_Other();
  }

  late final _inflate_OrderOnlineParty_OtherPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OrderOnlinePartyKind> Function()>>(
          'inflate_OrderOnlineParty_Other');
  late final _inflate_OrderOnlineParty_Other =
      _inflate_OrderOnlineParty_OtherPtr
          .asFunction<ffi.Pointer<OrderOnlinePartyKind> Function()>();

  ffi.Pointer<OrderTypeKind> inflate_OrderType_Delivery() {
    return _inflate_OrderType_Delivery();
  }

  late final _inflate_OrderType_DeliveryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OrderTypeKind> Function()>>(
          'inflate_OrderType_Delivery');
  late final _inflate_OrderType_Delivery = _inflate_OrderType_DeliveryPtr
      .asFunction<ffi.Pointer<OrderTypeKind> Function()>();

  ffi.Pointer<OrderTypeKind> inflate_OrderType_ForHere() {
    return _inflate_OrderType_ForHere();
  }

  late final _inflate_OrderType_ForHerePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OrderTypeKind> Function()>>(
          'inflate_OrderType_ForHere');
  late final _inflate_OrderType_ForHere = _inflate_OrderType_ForHerePtr
      .asFunction<ffi.Pointer<OrderTypeKind> Function()>();

  ffi.Pointer<OrderTypeKind> inflate_OrderType_Pickup() {
    return _inflate_OrderType_Pickup();
  }

  late final _inflate_OrderType_PickupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OrderTypeKind> Function()>>(
          'inflate_OrderType_Pickup');
  late final _inflate_OrderType_Pickup = _inflate_OrderType_PickupPtr
      .asFunction<ffi.Pointer<OrderTypeKind> Function()>();

  ffi.Pointer<OrderTypeKind> inflate_OrderType_DriveThrough() {
    return _inflate_OrderType_DriveThrough();
  }

  late final _inflate_OrderType_DriveThroughPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OrderTypeKind> Function()>>(
          'inflate_OrderType_DriveThrough');
  late final _inflate_OrderType_DriveThrough =
      _inflate_OrderType_DriveThroughPtr
          .asFunction<ffi.Pointer<OrderTypeKind> Function()>();

  ffi.Pointer<OrderTypeKind> inflate_OrderType_Curbside() {
    return _inflate_OrderType_Curbside();
  }

  late final _inflate_OrderType_CurbsidePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OrderTypeKind> Function()>>(
          'inflate_OrderType_Curbside');
  late final _inflate_OrderType_Curbside = _inflate_OrderType_CurbsidePtr
      .asFunction<ffi.Pointer<OrderTypeKind> Function()>();

  ffi.Pointer<OrderTypeKind> inflate_OrderType_Togo() {
    return _inflate_OrderType_Togo();
  }

  late final _inflate_OrderType_TogoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OrderTypeKind> Function()>>(
          'inflate_OrderType_Togo');
  late final _inflate_OrderType_Togo = _inflate_OrderType_TogoPtr
      .asFunction<ffi.Pointer<OrderTypeKind> Function()>();

  ffi.Pointer<TicketStatusKind> inflate_TicketStatus_Avoid() {
    return _inflate_TicketStatus_Avoid();
  }

  late final _inflate_TicketStatus_AvoidPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<TicketStatusKind> Function()>>(
          'inflate_TicketStatus_Avoid');
  late final _inflate_TicketStatus_Avoid = _inflate_TicketStatus_AvoidPtr
      .asFunction<ffi.Pointer<TicketStatusKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_OrderTypeInfo extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> phone;

  external ffi.Pointer<wire_uint_8_list> vehicle_model;

  external ffi.Pointer<wire_uint_8_list> vehicle_color;

  external ffi.Pointer<wire_uint_8_list> vehicle_plate;

  external ffi.Pointer<wire_uint_8_list> notes;

  @ffi.Uint64()
  external int time;

  external ffi.Pointer<wire_uint_8_list> address;
}

final class wire_OrderType_Delivery extends ffi.Struct {
  external ffi.Pointer<wire_OrderTypeInfo> field0;
}

final class wire_OrderType_ForHere extends ffi.Struct {
  external ffi.Pointer<wire_OrderTypeInfo> field0;
}

final class wire_OrderType_Pickup extends ffi.Struct {
  external ffi.Pointer<wire_OrderTypeInfo> field0;
}

final class wire_OrderType_DriveThrough extends ffi.Struct {
  external ffi.Pointer<wire_OrderTypeInfo> field0;
}

final class wire_OrderType_Curbside extends ffi.Struct {
  external ffi.Pointer<wire_OrderTypeInfo> field0;
}

final class wire_OrderType_Togo extends ffi.Struct {
  external ffi.Pointer<wire_OrderTypeInfo> field0;
}

final class OrderTypeKind extends ffi.Union {
  external ffi.Pointer<wire_OrderType_Delivery> Delivery;

  external ffi.Pointer<wire_OrderType_ForHere> ForHere;

  external ffi.Pointer<wire_OrderType_Pickup> Pickup;

  external ffi.Pointer<wire_OrderType_DriveThrough> DriveThrough;

  external ffi.Pointer<wire_OrderType_Curbside> Curbside;

  external ffi.Pointer<wire_OrderType_Togo> Togo;
}

final class wire_OrderType extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<OrderTypeKind> kind;
}

final class wire_Staff extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> staff_id;

  external ffi.Pointer<wire_uint_8_list> phone_number;

  external ffi.Pointer<wire_uint_8_list> address;
}

final class wire_CreatedEntity_Staff extends ffi.Struct {
  external ffi.Pointer<wire_Staff> field0;
}

final class wire_OrderOnlineParty_Uber extends ffi.Opaque {}

final class wire_OrderOnlineParty_Grab extends ffi.Opaque {}

final class wire_OrderOnlineParty_UberEat extends ffi.Opaque {}

final class wire_OrderOnlineParty_DoorDash extends ffi.Opaque {}

final class wire_OrderOnlineParty_SkipTheDisk extends ffi.Opaque {}

final class wire_OrderOnlineParty_Other extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;
}

final class OrderOnlinePartyKind extends ffi.Union {
  external ffi.Pointer<wire_OrderOnlineParty_Uber> Uber;

  external ffi.Pointer<wire_OrderOnlineParty_Grab> Grab;

  external ffi.Pointer<wire_OrderOnlineParty_UberEat> UberEat;

  external ffi.Pointer<wire_OrderOnlineParty_DoorDash> DoorDash;

  external ffi.Pointer<wire_OrderOnlineParty_SkipTheDisk> SkipTheDisk;

  external ffi.Pointer<wire_OrderOnlineParty_Other> Other;
}

final class wire_OrderOnlineParty extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<OrderOnlinePartyKind> kind;
}

final class wire_CreatedEntity_OrderOnlineParty extends ffi.Struct {
  external ffi.Pointer<wire_OrderOnlineParty> field0;
}

final class CreatedEntityKind extends ffi.Union {
  external ffi.Pointer<wire_CreatedEntity_Staff> Staff;

  external ffi.Pointer<wire_CreatedEntity_OrderOnlineParty> OrderOnlineParty;
}

final class wire_CreatedEntity extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<CreatedEntityKind> kind;
}

final class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_OrderItemStatus_Cooking extends ffi.Opaque {}

final class wire_OrderItemStatus_Avoid extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_OrderItemStatus_Pending extends ffi.Opaque {}

final class wire_OrderItemStatus_Done extends ffi.Opaque {}

final class OrderItemStatusKind extends ffi.Union {
  external ffi.Pointer<wire_OrderItemStatus_Cooking> Cooking;

  external ffi.Pointer<wire_OrderItemStatus_Avoid> Avoid;

  external ffi.Pointer<wire_OrderItemStatus_Pending> Pending;

  external ffi.Pointer<wire_OrderItemStatus_Done> Done;
}

final class wire_OrderItemStatus extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<OrderItemStatusKind> kind;
}

final class wire_Courser extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> courser_id;

  @ffi.Uint64()
  external int courser_sequence;
}

final class wire_Component extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  @ffi.Uint64()
  external int quantity;
}

final class wire_list_component extends ffi.Struct {
  external ffi.Pointer<wire_Component> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_OrderItem extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> combo_name;

  external ffi.Pointer<wire_uint_8_list> order_item_id;

  @ffi.Uint64()
  external int quantity;

  external ffi.Pointer<wire_StringList> tags;

  external ffi.Pointer<wire_uint_8_list> size;

  external ffi.Pointer<wire_uint_8_list> prepare_notes;

  external wire_OrderItemStatus status;

  external ffi.Pointer<wire_Courser> courser;

  external ffi.Pointer<wire_StringList> modifiers;

  external ffi.Pointer<wire_list_component> components;
}

final class wire_list_order_item extends ffi.Struct {
  external ffi.Pointer<wire_OrderItem> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_TicketStatus_Cooking extends ffi.Opaque {}

final class wire_TicketStatus_Avoid extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_TicketStatus_Pending extends ffi.Opaque {}

final class wire_TicketStatus_Done extends ffi.Opaque {}

final class TicketStatusKind extends ffi.Union {
  external ffi.Pointer<wire_TicketStatus_Cooking> Cooking;

  external ffi.Pointer<wire_TicketStatus_Avoid> Avoid;

  external ffi.Pointer<wire_TicketStatus_Pending> Pending;

  external ffi.Pointer<wire_TicketStatus_Done> Done;
}

final class wire_TicketStatus extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<TicketStatusKind> kind;
}

final class wire_SMSNotify extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> phone;

  external ffi.Pointer<wire_uint_8_list> customer_arrive_url;
}

final class wire_AdditionFee extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> amount;
}

final class wire_list_addition_fee extends ffi.Struct {
  external ffi.Pointer<wire_AdditionFee> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_PromoCode extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> amount;
}

final class wire_list_promo_code extends ffi.Struct {
  external ffi.Pointer<wire_PromoCode> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_Costs extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> subtotal;

  external ffi.Pointer<wire_uint_8_list> tax;

  external ffi.Pointer<wire_uint_8_list> delivery_fee;

  external ffi.Pointer<wire_uint_8_list> surcharge;

  external ffi.Pointer<wire_uint_8_list> convenience_fee;

  external ffi.Pointer<wire_uint_8_list> tip;

  external ffi.Pointer<wire_list_addition_fee> additional_fees;

  external ffi.Pointer<wire_uint_8_list> total;

  external ffi.Pointer<wire_list_promo_code> promo_codes;
}

final class wire_RetryInfo extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> notification_url;

  @ffi.Uint64()
  external int expire_time;
}

final class wire_Ticket extends ffi.Struct {
  external wire_OrderType order_type;

  external wire_CreatedEntity created_by;

  external ffi.Pointer<wire_uint_8_list> ticket_name;

  @ffi.Uint64()
  external int created_time;

  external ffi.Pointer<wire_uint_8_list> ticket_id;

  external ffi.Pointer<wire_uint_8_list> ticket_sequence;

  external ffi.Pointer<wire_list_order_item> order_items;

  external wire_TicketStatus ticket_status;

  external ffi.Pointer<wire_SMSNotify> sms_notify;

  external ffi.Pointer<wire_Costs> costs;

  external ffi.Pointer<wire_RetryInfo> retry;
}

final class wire_list_order_type extends ffi.Struct {
  external ffi.Pointer<wire_OrderType> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_FilterTime extends ffi.Struct {
  @ffi.Uint64()
  external int start_time;

  @ffi.Uint64()
  external int end_time;
}

final class wire_list_courser extends ffi.Struct {
  external ffi.Pointer<wire_Courser> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_list_ticket extends ffi.Struct {
  external ffi.Pointer<wire_Ticket> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_CallbackChanged_Ticket extends ffi.Struct {
  external ffi.Pointer<wire_list_ticket> tickets;
}

final class wire_CallbackChanged_OrderItem extends ffi.Struct {
  external ffi.Pointer<wire_list_order_item> order_items;
}

final class CallbackChangedKind extends ffi.Union {
  external ffi.Pointer<wire_CallbackChanged_Ticket> Ticket;

  external ffi.Pointer<wire_CallbackChanged_OrderItem> OrderItem;
}

final class wire_CallbackChanged extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<CallbackChangedKind> kind;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
